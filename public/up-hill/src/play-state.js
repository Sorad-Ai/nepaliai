// Generated by CoffeeScript 1.9.2
var DEBUG, K, MARGIN, MARGIN_BACK, MAX_WORLD_HEIGHT, PlayState, g_this, log, type,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

log = function() {
    var ref, val;
    val = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
        return console.log.apply(console, val);
    } else {
        return typeof window !== "undefined" && window !== null ? (ref = window.console) != null ? typeof ref.log === "function" ? ref.log.apply(ref, val) : void 0 : void 0 : void 0;
    }
};

Array.prototype.remove = function(val) {
    var index;
    index = this.indexOf(val);
    if (index > -1) {
        return this.splice(index, 1);
    }
};

Array.prototype.last = function() {
    return this[this.length - 1];
};

type = function(obj) {
    var class_to_type;
    if (obj === void 0 || obj === null) {
        return String(obj);
    }
    class_to_type = {
        '[object Boolean]': 'Boolean',
        '[object Number]': 'Number',
        '[object String]': 'String',
        '[object Function]': 'Function',
        '[object Array]': 'Array',
        '[object Date]': 'Date',
        '[object RegExp]': 'Regexp',
        '[object Object]': 'Object'
    };
    return class_to_type[Object.prototype.toString.call(obj)];
};

MAX_WORLD_HEIGHT = 100000;

MARGIN = 100;

MARGIN_BACK = 20;

K = 20.0;

DEBUG = false;

g_this = null;
gameover_dist = null;

PlayState = (function() {
    function PlayState() {
        this.steps_cnt = 30.0;
        this.step = 55;
        this.speed = 2.0;
        this.cnt = 0;
        this.springsArray = [];
        this.constraintsArray = [];
        this.target = null;
        this.mousePointer = null;
        this.height_len = 1000;
        this.cur_level = 0;
        this.ground_color = 0;
        this.money = [];
        this.gas = [];
        this.food = [];
        this.flags = [];
        this.mushroms = [];
        this.coins_ride = 0;
        this.fuel = 100;
        this.forward_flag = false;
        this.backward_flag = false;
        this.is_running = true;
        this.magic = false;
    }

    PlayState.prototype.addP2Debug = function(P2_object, type) {
        var p1, p2;
        if (type === "spring") {
            p1 = game.add.sprite(P2_object.data.localAnchorA[0] * K, P2_object.data.localAnchorA[1] * K);
            p2 = game.add.sprite(P2_object.data.localAnchorB[0] * K, P2_object.data.localAnchorB[1] * K);
            P2_object.data.bodyA.parent.sprite.addChild(p1);
            P2_object.data.bodyB.parent.sprite.addChild(p2);
            game.physics.p2.enable([p1, p2]);
            p1.body["static"] = true;
            p2.body["static"] = true;
            this.springsArray.push([p1, p2]);
        }
        if (type === "prismaticConstraint") {
            p1 = game.add.sprite((P2_object.localAnchorA[0] * K) * -1, (P2_object.localAnchorA[1] * K) * -1);
            p2 = game.add.sprite((P2_object.localAnchorB[0] * K) * -1, (P2_object.localAnchorB[1] * K) * -1);
            P2_object.bodyA.parent.sprite.addChild(p1);
            P2_object.bodyB.parent.sprite.addChild(p2);
            game.physics.p2.enable([p1, p2]);
            p1.body["static"] = true;
            p2.body["static"] = true;
            return this.constraintsArray.push([p1, p2]);
        }
    };

    PlayState.prototype.loadLevel = function(n) {
        SG_Hooks.gameStart();
        var aa, ab, cnt, cos, decor, dst, dst_cnt, elevation, elv, flag_spr, gas_spr, heightmap, i, j, j2, k, k_1, k_2, k_3, k_dst, k_elv, key, l, len, len1, len10, len11, len12, len2, len3, len4, len5, len6, len7, len8, len9, min_dst, min_y, money_spr, mud, mud_poly_tmp, mud_tmp, mushrom, o, poly, prev, prev_y, q, r, random, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rnd, s, seg, seg_step, segment, sin, spr, st, st_poly, stop, str, t, top, topmap, typ, typemap, u, v, w, x, y, z;
        cos = Math.cos;
        sin = Math.sin;
        random = Math.random;
        this.level = this.game_data.levels[n];
        // SG_Hooks.levelStarted(n+1);
        sgCurlLevl = n + 1;
        game.stage.backgroundColor = this.level.back_color;
        this.ground_color = parseInt(this.level.ground_color.slice(1), 16);
        if (this.level.m_color != null) {
            this.mud_color = parseInt(this.level.m_color.slice(1), 16);
        }
        game.physics.p2.gravity.y = this.level.gravity;
        game.physics.p2.restitution = this.level.restitution;
        game.physics.p2.friction = this.level.friction;
        if (this.back != null) {
            this.back.destroy();
        }
        if (this.level.back_stay != null) {
            this.back = game.add.sprite(-MARGIN_BACK / 2, -MARGIN_BACK / 2);
            this.back.width = this.back.width + 2;
            this.back.height = this.back.height + 2;
        } else {
            this.back = game.add.tileSprite(-MARGIN_BACK / 2, -MARGIN_BACK / 2, game.width + MARGIN_BACK, game.height + MARGIN_BACK);
        }
        this.back_grp.add(this.back);
        this.back.loadTexture(this.level.back);
        if (this.mask != null) {
            this.mask.destroy();
        }
        this.mask = game.add.graphics(0, 0);
        this.land_grp.add(this.mask);
        if (this.mask_top != null) {
            this.mask_top.destroy();
        }
        this.mask_top = game.add.graphics(0, 0);
        this.land_grp.add(this.mask_top);
        if (this.tile != null) {
            this.tile.destroy();
        }
        this.tile = game.add.tileSprite(-MARGIN / 2, -MARGIN / 2, game.width + MARGIN, game.height + MARGIN);
        this.land_grp.add(this.tile);
        this.tile.mask = this.mask;
        this.tile.loadTexture('atlas', this.level.tile);
        if (this.tile_top != null) {
            this.tile_top.destroy();
        }
        if (this.level.top) {
            this.tile_top = game.add.tileSprite(-MARGIN / 2, -MARGIN / 2, game.width + MARGIN, game.height + MARGIN);
            this.land_grp.add(this.tile_top);
            this.tile_top.mask = this.mask_top;
            this.tile_top.loadTexture('atlas', this.level.tile);
        }
        if (this.land_line != null) {
            this.land_line.destroy();
        }
        this.land_line = game.add.graphics(0, 0);
        this.land_grp.add(this.land_line);
        k_1 = this.level.k1;
        k_2 = this.level.k2;
        k_3 = this.level.k3;
        k_elv = this.level.elv;
        k_dst = this.level.dst;
        min_dst = this.level.min_dst;
        this.heightmap = [];
        this.drawmap = [];
        this.mud_drawmap = [];
        this.mud_index = [];
        this.segmap = [];
        this.map = [];
        if (!this.level.segments) {
            typ = 0;
            elv = 0;
            str = 0;
            dst = 25;
            this.map.push({
                typ: typ,
                elv: elv,
                str: str,
                dst: dst
            });
            i = 0;
            dst_cnt = 0;
            stop = this.level.win_dist + 100;
            while (dst_cnt < stop) {
                rnd = random();
                typ = 0;
                if (this.level.rnd5 != null) {
                    if (rnd < this.level.rnd5) {
                        typ = 5;
                    }
                }
                if (this.level.rnd4 != null) {
                    if (rnd < this.level.rnd4) {
                        typ = 4;
                    }
                }
                if (rnd < this.level.rnd3) {
                    typ = 3;
                }
                if (rnd < this.level.rnd2) {
                    typ = 2;
                }
                if (rnd < this.level.rnd1) {
                    typ = 1;
                }
                if (typ === 1) {
                    str = random() * k_1;
                }
                if (typ === 2) {
                    str = random() * k_2;
                }
                if (typ === 3) {
                    str = random() * k_3;
                }
                elv = (random() - 0.5) * k_elv;
                dst = random() * k_dst + min_dst;
                if (typ === 4) {
                    elv = 0;
                    dst = 20;
                }
                if (typ === 5) {
                    elv = 0;
                    dst = 20;
                }
                dst_cnt += dst;
                this.map.push({
                    typ: typ,
                    elv: elv,
                    str: str,
                    dst: dst
                });
                i++;
            }
        } else {
            ref = this.level.segments;
            for (k = 0, len = ref.length; k < len; k++) {
                segment = ref[k];
                typ = segment.typ;
                elv = 0;
                if (this.level.min_height) {
                    top = this.level.min_height;
                } else {
                    top = 500.0;
                }
                if (segment.top != null) {
                    top = segment.top;
                }
                if (typ === 0 || typ === 1 || typ === 2 || typ === 3) {
                    elv = segment.elv;
                }
                str = 0;
                if (typ === 0 || typ === 1 || typ === 2 || typ === 3) {
                    str = segment.k;
                }
                dst = 20;
                if (typ === 0 || typ === 1 || typ === 2 || typ === 3) {
                    dst = segment.dst;
                }
                this.map.push({
                    typ: typ,
                    elv: elv,
                    str: str,
                    dst: dst,
                    top: top
                });
            }
        }
        heightmap = [];
        typemap = [];
        j = 0;
        j2 = 0;
        elevation = 0;
        prev_y = 0.0;
        ref1 = this.map;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
            seg = ref1[l];
            i = 0;
            if (seg.typ === 4) {
                j = 5;
            }
            if (seg.typ === 5) {
                j = 7;
            }
            seg_step = 0.0;
            while (i < seg.dst) {
                y = 0;
                if (seg.typ === 1) {
                    y = seg.str * cos(j * 0.2);
                }
                if (seg.typ === 2) {
                    y = seg.str * 0.25 * cos(0.15 * j) * sin(0.25 * j) + sin(0.05 * j) * sin(0.025 * j);
                }
                if (seg.typ === 3) {
                    y = cos(0.12 * j) * sin(0.25 * j) + seg.str * random() * sin(0.05 * j) * sin(0.025 * j);
                }
                if (seg.typ === 4) {
                    y = 2.5 * cos(j * 0.3);
                }
                if (seg.typ === 5) {
                    y = 1.5 * cos(j * 0.2);
                }
                if (i === seg.dst - 1) {
                    prev_y = y;
                } else {
                    y = y * seg_step + prev_y * (1 - seg_step);
                }
                if (j2 === 0) {
                    y = 1000;
                }
                seg_step += 0.2;
                seg_step = Math.min(seg_step, 1.0);
                j2++;
                if (!this.level.top) {
                    typemap.push({
                        'typ': seg.typ,
                        'index': i
                    });
                } else {
                    typemap.push({
                        'typ': seg.typ,
                        'index': i,
                        'top': seg.top
                    });
                }
                elevation += seg.elv;
                heightmap.push(y + elevation);
                i++;
                j++;
            }
        }
        heightmap.push(heightmap.last() + 1000);
        heightmap = heightmap.reverse();
        typemap = typemap.reverse();
        this.heightmap = [];
        for (o = 0, len2 = heightmap.length; o < len2; o++) {
            y = heightmap[o];
            this.heightmap.push(y);
        }
        min_y = 10000.0;
        i = this.heightmap.length - 1;
        x = 0;
        st = {};
        st_poly = {};
        mud_tmp = [];
        mud_poly_tmp = [];
        this.mud_polymap = [];
        while (i >= 0) {
            y = game.physics.p2.mpxi(this.heightmap[i]);
            min_y = Math.min(min_y, y);
            this.drawmap.push({
                'x': game.physics.p2.mpx(x),
                'y': y
            });
            if (typemap[i]) {
                if (typemap[i].typ === 5) {
                    if ((1 < (ref2 = typemap[i].index) && ref2 < 16)) {
                        mud_tmp.push({
                            'x': game.physics.p2.mpx(x),
                            'y': y
                        });
                    }
                    if (typemap[i].index === 1) {
                        mud_tmp = [];
                        st = {
                            'x': game.physics.p2.mpx(x) + 150,
                            'y': y
                        };
                        mud_tmp.push(st);
                        mud_tmp.push({
                            'x': game.physics.p2.mpx(x),
                            'y': y
                        });
                    }
                    if (typemap[i].index === 16) {
                        mud_tmp.push(st);
                        this.mud_drawmap.push(mud_tmp);
                    }
                    if ((3 < (ref3 = typemap[i].index) && ref3 < 14)) {
                        mud_poly_tmp.push({
                            'x': game.physics.p2.mpx(x),
                            'y': y
                        });
                    }
                    if (typemap[i].index === 3) {
                        mud_poly_tmp = [];
                        st_poly = {
                            'x': game.physics.p2.mpx(x) + 150,
                            'y': y
                        };
                        mud_poly_tmp.push(st_poly);
                        mud_poly_tmp.push({
                            'x': game.physics.p2.mpx(x),
                            'y': y
                        });
                    }
                    if (typemap[i].index === 14) {
                        mud_poly_tmp.push(st_poly);
                        this.mud_polymap.push(mud_poly_tmp);
                    }
                }
            }
            if (typemap[i]) {
                this.segmap.push(typemap[i].typ);
            } else {
                this.segmap.push(0);
            }
            x++;
            i--;
        }
        this.mud_material = game.physics.p2.createMaterial('mud_material');
        ref4 = this.mud_polymap;
        for (q = 0, len3 = ref4.length; q < len3; q++) {
            mud = ref4[q];
            i = 0;
            poly = [];
            while (i < mud.length) {
                poly.push(mud[i].x);
                poly.push(mud[i].y);
                i++;
            }
            spr = game.add.sprite(0, 0);
            game.physics.p2.enable(spr, Phaser.Physics.P2JS, true);
            spr.body.clearShapes();
            spr.body["static"] = true;
            spr.body.addPolygon(null, poly);
            spr.body.debug = false;
            spr.body.setCollisionGroup(this.cg_level);
            spr.body.collides(this.cg_car);
            spr.body.setMaterial(this.mud_material);
            spr.body.onBeginContact.add(this.mudBeginContact, this);
        }
        this.topmaps = [];
        this.drawtop = [];
        this.max_height = min_y - game.height - MARGIN;
        x = 0;
        y = this.max_height;
        topmap = [];
        topmap.push(x);
        topmap.push(y);
        cnt = 0;
        i = 0;
        while (i < this.drawmap.length) {
            if (cnt > 100) {
                topmap.push(x);
                topmap.push(this.max_height);
                this.topmaps.push(topmap);
                topmap = [];
                topmap.push(x);
                topmap.push(this.max_height);
                x -= K * 2;
                topmap.push(x);
                topmap.push(y);
                x += K * 2;
                cnt = 1;
            }
            if (this.level.top) {
                if (!typemap[i]) {
                    y = this.drawmap[i].y - (random() * this.level.k_top + this.level.min_height);
                } else {
                    y = this.drawmap[i].y - (random() * this.level.k_top + typemap[i].top);
                }
                topmap.push(x);
                topmap.push(y);
                this.drawtop.push({
                    'x': x,
                    'y': y
                });
            }
            x += K * 2;
            i += 2;
            cnt++;
        }
        if (this.level.top) {
            topmap.push(x);
            topmap.push(this.max_height);
            this.topmaps.push(topmap);
        }
        ref5 = this.money;
        for (r = 0, len4 = ref5.length; r < len4; r++) {
            spr = ref5[r];
            spr.destroy();
        }
        this.money = [];
        i = 0;
        j = 0;
        if ((this.level.money != null) && this.level.money.length > 0) {
            i = 0;
            j = 0;
            while (i < this.drawmap.length) {
                if (this.drawmap[i].x > this.level.money[j].x * K) {
                    key = this.level.money[j].val + '.png';
                    money_spr = game.add.sprite(this.drawmap[i].x, this.drawmap[i].y - this.level.money[j].y * K, 'gui', key);
                    this.money_grp.add(money_spr);
                    money_spr.val = this.level.money[j].val;
                    this.money.push(money_spr);
                    j++;
                    if (j >= this.level.money.length) {
                        break;
                    }
                }
                i++;
            }
        }
        ref6 = this.gas;
        for (s = 0, len5 = ref6.length; s < len5; s++) {
            spr = ref6[s];
            spr.destroy();
        }
        this.gas = [];
        i = 0;
        j = 0;
        if ((this.level.gas != null) && this.level.gas.length > 0) {
            i = 0;
            j = 0;
            while (i < this.drawmap.length) {
                if (this.drawmap[i].x > this.level.gas[j].x * K) {
                    gas_spr = game.add.sprite(this.drawmap[i].x, this.drawmap[i].y - this.level.gas[j].y * K, 'gui', 'gasolin.png');
                    this.money_grp.add(gas_spr);
                    gas_spr.val = this.level.gas[j].val;
                    this.gas.push(gas_spr);
                    j++;
                    if (j >= this.level.gas.length) {
                        break;
                    }
                }
                i++;
            }
        }
        ref7 = this.flags;
        for (t = 0, len6 = ref7.length; t < len6; t++) {
            spr = ref7[t];
            spr.destroy();
        }
        this.flags = [];
        i = 0;
        j = 0;
        if ((this.level.flags != null) && this.level.flags.length > 0) {
            i = 0;
            j = 0;
            while (i < this.drawmap.length) {
                if (this.drawmap[i].x > this.level.flags[j].x * K) {
                    if (j > game.g_player.flags[game.g_player.level]) {
                        flag_spr = game.add.sprite(this.drawmap[i].x, this.drawmap[i].y - this.level.flags[j].y * K, 'atlas', 'flag.png');
                        this.flags_grp.add(flag_spr);
                        flag_spr.val = this.level.flags[j].val;
                        this.flags.push(flag_spr);
                    }
                    j++;
                    if (j >= this.level.flags.length) {
                        break;
                    }
                }
                i++;
            }
        }
        if (this.decors != null) {
            ref8 = this.decors;
            for (u = 0, len7 = ref8.length; u < len7; u++) {
                spr = ref8[u];
                spr.destroy();
            }
        }
        this.decors = [];
        if ((this.level.decor != null) && this.level.decor.length > 0) {
            i = 0;
            while (i < this.drawmap.length) {
                if (this.segmap[i] !== 4) {
                    decor = this.level.decor[(Math.random() * (this.level.decor.length - 1)).toFixed()];
                    rnd = Math.random();
                    if (rnd < decor.k) {
                        spr = game.add.sprite(this.drawmap[i].x, this.drawmap[i].y, 'atlas', decor.sprite);
                        rnd = Math.random() - 0.5;
                        spr.y -= decor.y + decor.y * (Math.random() - 0.5) * 0.1;
                        this.decor_grp.add(spr);
                        this.decors.push(spr);
                    }
                }
                i++;
            }
        }
        if (this.stones != null) {
            ref9 = this.stones;
            for (v = 0, len8 = ref9.length; v < len8; v++) {
                spr = ref9[v];
                spr.destroy();
            }
        }
        this.stones = [];
        if ((this.level.stones != null) && this.level.stones.length > 0) {
            i = 0;
            j = 0;
            while (i < this.drawmap.length) {
                if (this.drawmap[i].x > this.level.stones[j].x * K) {
                    spr = game.add.sprite(this.drawmap[i].x, this.drawmap[i].y, 'atlas', this.level.stones[j].sprite);
                    spr.y += this.level.stones[j].y;
                    this.stones_grp.add(spr);
                    this.stones.push(spr);
                    game.physics.p2.enable([spr], Phaser.Physics.P2JS, true);
                    spr.body.clearShapes();
                    spr.body.loadPolygon('physics', this.level.stones[j].poly);
                    spr.body.mass = 1;
                    spr.body.debug = false;
                    spr.body["static"] = true;
                    spr.body.setCollisionGroup(this.cg_objects);
                    spr.body.collides(this.cg_car);
                    j++;
                    if (j >= this.level.stones.length) {
                        break;
                    }
                }
                i++;
            }
        }
        ref10 = this.food;
        for (w = 0, len9 = ref10.length; w < len9; w++) {
            spr = ref10[w];
            if (spr) {
                spr.destroy();
                spr = null;
            }
        }
        this.food = [];
        ref11 = this.mushroms;
        for (z = 0, len10 = ref11.length; z < len10; z++) {
            spr = ref11[z];
            spr.destroy();
        }
        this.mushroms = [];
        prev = this.segmap[0];
        i = 1;
        while (i < this.drawmap.length) {
            if (this.segmap[i] === 4 && this.segmap[i - 1] !== 4) {
                j = 0;
            }
            if (this.segmap[i] === 4) {
                if (j === 6) {
                    mushrom = game.add.sprite(this.drawmap[i].x - 7, this.drawmap[i].y + 50, 'atlas', 'mushroom.png');
                    this.decor_grp.add(mushrom);
                    game.physics.p2.enable([mushrom], Phaser.Physics.P2JS, true);
                    mushrom.body.clearShapes();
                    mushrom.body.loadPolygon('physics', 'mushroom');
                    mushrom.body.mass = 1;
                    mushrom.body.debug = false;
                    mushrom.body.setCollisionGroup(this.cg_objects);
                    mushrom.body.collides(this.cg_car);
                    mushrom.body.kinematic = true;
                    mushrom.body.onBeginContact.add(this.mushrom_contact, mushrom);
                    this.mushroms.push(mushrom);
                }
                j++;
            }
            i++;
        }
        if (this.land != null) {
            this.land.destroy();
        }
        this.land = game.add.sprite(game.physics.p2.mpx(this.heightmap.length - 1));
        game.physics.p2.enable([this.land], Phaser.Physics.P2JS, true);
        this.heightfieldShape = new p2.Heightfield(this.heightmap, {
            elementWidth: 1
        });
        this.land.body.clearShapes();
        this.land.body["static"] = true;
        this.land.body.mass = 1;
        this.land.body.addShape(this.heightfieldShape);
        this.land.body.setCollisionGroup(this.cg_level);
        this.land.body.collides(this.cg_car);
        this.land.body.collides(this.cg_objects);
        this.land.body.collides(this.cg_driver_body);
        if (this.tops != null) {
            ref12 = this.tops;
            for (aa = 0, len11 = ref12.length; aa < len11; aa++) {
                top = ref12[aa];
                top.destroy();
            }
        }
        if (this.level.top) {
            this.tops = [];
            ref13 = this.topmaps;
            for (ab = 0, len12 = ref13.length; ab < len12; ab++) {
                topmap = ref13[ab];
                top = game.add.sprite(0, 0);
                game.physics.p2.enable(top, Phaser.Physics.P2JS, true);
                top.body.clearShapes();
                top.body["static"] = true;
                top.body.addPolygon(null, topmap);
                top.body.debug = false;
                top.body.setCollisionGroup(this.cg_level);
                top.body.collides(this.cg_car);
                top.body.collides(this.cg_objects);
                this.tops.push(top);
            }
        }
        game.world.setBounds(30, -MAX_WORLD_HEIGHT / 2, this.heightmap.length * K - MARGIN, MAX_WORLD_HEIGHT);
        game.physics.p2.setBoundsToWorld(true, true, true, true, false);
        return game.physics.p2.updateBoundsCollisionGroup();
    };

    PlayState.prototype.loadCar = function(xx) {
        var contactMaterial, index, key, ref, ref1, ref2, ref3, ref4, ref5, upgrades_engine, upgrades_fuel, upgrades_spec, upgrades_susp, upgrades_tyre, val, yy;
        xx *= 20;
        yy = this.drawmap[Math.floor(xx / K)].y - 150;
        this.springsArray = [];
        this.constraintsArray = [];
        this.car = {};
        ref = this.game_data.cars[game.g_player.car];
        for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            val = ref[key];
            this.car[key] = val;
        }
        if (this.car.air_accsel == null) {
            this.car.air_accsel = 0.01;
        }
        if (this.car.air_max == null) {
            this.car.air_max = 0.02;
        }
        index = game.g_player.upgrades[game.g_player.car].upgrades_susp;
        if (index >= 0) {
            upgrades_susp = this.game_data.cars[game.g_player.car].upgrades_susp[index];
            ref1 = upgrades_susp.ups;
            for (key in ref1) {
                if (!hasProp.call(ref1, key)) continue;
                val = ref1[key];
                this.car[key] += val;
            }
        }
        index = game.g_player.upgrades[game.g_player.car].upgrades_engine;
        if (index >= 0) {
            upgrades_engine = this.game_data.cars[game.g_player.car].upgrades_engine[index];
            ref2 = upgrades_engine.ups;
            for (key in ref2) {
                if (!hasProp.call(ref2, key)) continue;
                val = ref2[key];
                this.car[key] += val;
            }
        }
        index = game.g_player.upgrades[game.g_player.car].upgrades_tyre;
        if (index >= 0) {
            upgrades_tyre = this.game_data.cars[game.g_player.car].upgrades_tyre[index];
            ref3 = upgrades_tyre.ups;
            for (key in ref3) {
                if (!hasProp.call(ref3, key)) continue;
                val = ref3[key];
                if (key !== 'fric') {
                    this.car[key] += val;
                } else {
                    game.physics.p2.friction = this.level.friction + val;
                }
            }
        }
        index = game.g_player.upgrades[game.g_player.car].upgrades_fuel;
        if (index >= 0) {
            upgrades_fuel = this.game_data.cars[game.g_player.car].upgrades_fuel[index];
            ref4 = upgrades_fuel.ups;
            for (key in ref4) {
                if (!hasProp.call(ref4, key)) continue;
                val = ref4[key];
                this.car[key] += val;
            }
        }
        index = game.g_player.upgrades[game.g_player.car].upgrades_spec;
        if (index >= 0) {
            upgrades_spec = this.game_data.cars[game.g_player.car].upgrades_spec[index];
            ref5 = upgrades_spec.ups;
            for (key in ref5) {
                if (!hasProp.call(ref5, key)) continue;
                val = ref5[key];
                if (key !== 'fric') {
                    this.car[key] += val;
                } else {
                    game.physics.p2.friction = this.level.friction + val;
                }
            }
        }
        this.fuel = this.car.fuel_max;
        if (this.wheel_front != null) {
            this.wheel_front.destroy();
        }
        this.wheel_front = game.add.sprite(xx, yy, 'atlas', this.car.wheel_front_sprite);
        this.car_grp.add(this.wheel_front);
        if (this.wheel_rear != null) {
            this.wheel_rear.destroy();
        }
        this.wheel_rear = game.add.sprite(xx, yy, 'atlas', this.car.wheel_rear_sprite);
        this.car_grp.add(this.wheel_rear);
        if (this.car_top != null) {
            this.car_top.destroy();
            this.car_top = null;
        }
        if (this.car.top_behind != null) {
            if (this.car.top_sprite != null) {
                this.car_top = game.add.sprite(xx, yy, 'atlas', this.car.top_sprite);
                this.car_grp.add(this.car_top);
            }
            if (this.driver_body != null) {
                this.driver_body.destroy();
            }
            this.driver_body = game.add.sprite(xx, yy, 'atlas', 'cars_0025_pers_bottom.png');
            this.car_grp.add(this.driver_body);
            if (this.driver_head != null) {
                this.driver_head.destroy();
            }
            this.driver_head = game.add.sprite(xx, yy, 'atlas', 'cars_0024_pers_head.png');
            this.car_grp.add(this.driver_head);
            if (this.car_body != null) {
                this.car_body.destroy();
            }
            this.car_body = game.add.sprite(xx, yy, 'atlas', this.car.car_sprite);
            this.car_grp.add(this.car_body);
        } else {
            if (this.driver_body != null) {
                this.driver_body.destroy();
            }
            this.driver_body = game.add.sprite(xx, yy, 'atlas', 'cars_0025_pers_bottom.png');
            this.car_grp.add(this.driver_body);
            if (this.driver_head != null) {
                this.driver_head.destroy();
            }
            this.driver_head = game.add.sprite(xx, yy, 'atlas', 'cars_0024_pers_head.png');
            this.car_grp.add(this.driver_head);
            if (this.car_body != null) {
                this.car_body.destroy();
            }
            this.car_body = game.add.sprite(xx, yy, 'atlas', this.car.car_sprite);
            this.car_grp.add(this.car_body);
            if (this.car.top_sprite != null) {
                this.car_top = game.add.sprite(xx, yy, 'atlas', this.car.top_sprite);
                this.car_grp.add(this.car_top);
            }
        }
        this.car_body.x = xx;
        this.car_body.y = yy;
        this.wheel_front.x = this.car_body.x;
        this.wheel_front.y = this.car_body.y;
        this.wheel_rear.x = this.car_body.x;
        this.wheel_rear.y = this.car_body.y;
        this.driver_body.x = this.car_body.x;
        this.driver_body.y = this.car_body.y;
        this.driver_head.x = this.car_body.x;
        this.driver_head.y = this.car_body.y;
        if (this.car.top_sprite != null) {
            this.car_top.x = this.car_body.x;
            this.car_top.y = this.car_body.y;
            game.physics.p2.enable([this.car_top], Phaser.Physics.P2JS, true);
        }
        game.physics.p2.enable([this.wheel_front, this.wheel_rear, this.car_body, this.driver_body, this.driver_head], Phaser.Physics.P2JS, true);
        this.car_body.body.clearShapes();
        this.car_body.body.loadPolygon('physics', this.car.car_poly);
        this.car_body.body.mass = this.car.car_mass;
        this.car_body.body.setCollisionGroup(this.cg_car);
        this.car_body.body.debug = DEBUG;
        this.car_body.body.onBeginContact.add(this.carBodyContact, this);
        this.driver_body.body.clearShapes();
        this.driver_body.body.loadPolygon('physics', 'cars_0025_pers_bottom');
        this.driver_body.body.mass = this.car.driver_body_mass;
        this.driver_body.body.setCollisionGroup(this.cg_car);
        this.driver_body.body.debug = DEBUG;
        this.driver_body.body.onBeginContact.add(this.carBodyContact, this);
        this.driver_head.body.clearShapes();
        this.driver_head.body.loadPolygon('physics', 'cars_0024_pers_head');
        this.driver_head.body.mass = this.car.driver_head_mass;
        this.driver_head.body.setCollisionGroup(this.cg_car);
        this.driver_head.body.debug = DEBUG;
        this.driver_head.body.onBeginContact.add(this.headContact, this);
        if (this.top_const != null) {
            game.physics.p2.removeConstraint(this.top_const);
            this.top_const = null;
        }
        if (this.car.top_poly != null) {
            this.car_top.body.clearShapes();
            this.car_top.body.loadPolygon('physics', this.car.top_poly);
            this.car_top.body.mass = this.car.car_top_mass;
            this.car_top.body.setCollisionGroup(this.cg_car);
            this.car_top.body.debug = DEBUG;
            this.car_top.body.collides(this.cg_level);
        }
        if (this.car_top != null) {
            this.top_const = game.physics.p2.createLockConstraint(this.car_body, this.car_top, this.car.top_pos, 0);
            this.car_top.body.onBeginContact.add(this.topBeginContact, this);
            this.car_top.body.onEndContact.add(this.topContact, this);
        }
        this.wheel_front.body.clearShapes();
        this.wheel_front.body.setCircle(this.wheel_front.width / 2.0);
        this.wheel_front.body.mass = this.car.wheel_front_mass;
        this.wheel_front.body.setCollisionGroup(this.cg_car);
        this.wheel_front.body.debug = DEBUG;
        this.wheel_rear.body.clearShapes();
        this.wheel_rear.body.setCircle(this.wheel_rear.width / 2.0);
        this.wheel_rear.body.mass = this.car.wheel_rear_mass;
        this.wheel_rear.body.setCollisionGroup(this.cg_car);
        this.wheel_rear.body.debug = DEBUG;
        game.physics.p2.createLockConstraint(this.car_body, this.driver_body, this.car.driver_body_pos, 0);
        if (this.driver_head_spr != null) {
            game.physics.p2.removeSpring(this.driver_head_spr);
        }
        this.driver_head_spr = game.physics.p2.createSpring(this.driver_body, this.driver_head, this.car.dh_rest, this.car.dh_stiff, this.car.dh_damp, null, null, this.car.dh_body_pos, this.car.dh_head_pos);
        if (this.driver_head_const != null) {
            game.physics.p2.removeConstraint(this.driver_head_const);
        }
        this.driver_head_const = game.physics.p2.createPrismaticConstraint(this.driver_body, this.driver_head, true, this.car.dh_const_pos, [0, 0], [1, 1]);
        this.driver_head_const.lowerLimitEnabled = true;
        this.driver_head_const.upperLimitEnabled = true;
        this.driver_head_const.upperLimit = this.car.dh_up_lim;
        this.driver_head_const.lowerLimit = this.car.dh_low_lim;
        if (this.front_spr != null) {
            game.physics.p2.removeSpring(this.front_spr);
        }
        this.front_spr = game.physics.p2.createSpring(this.car_body, this.wheel_front, this.car.fs_rest, this.car.fs_stiff, this.car.fs_damp, null, null, this.car.fs_pos, [0, 0]);
        this.addP2Debug(this.front_spr, "spring");
        if (this.front_const != null) {
            game.physics.p2.removeConstraint(this.front_const);
        }
        this.front_const = game.physics.p2.createPrismaticConstraint(this.car_body, this.wheel_front, false, this.car.fs_pos, [0, 0], [0, 1]);
        this.addP2Debug(this.front_const, "prismaticConstraint");
        this.front_const.lowerLimitEnabled = this.front_const.upperLimitEnabled = true;
        this.front_const.upperLimit = this.car.fs_up_lim;
        this.front_const.lowerLimit = this.car.fs_low_lim;
        if (this.rear_spr != null) {
            game.physics.p2.removeSpring(this.rear_spr);
        }
        this.rear_spr = game.physics.p2.createSpring(this.car_body, this.wheel_rear, this.car.rs_rest, this.car.rs_stiff, this.car.rs_damp, null, null, this.car.rs_pos, [0, 0]);
        this.addP2Debug(this.rear_spr, "spring");
        if (this.rear_const != null) {
            game.physics.p2.removeConstraint(this.rear_const);
        }
        this.rear_const = game.physics.p2.createPrismaticConstraint(this.car_body, this.wheel_rear, false, this.car.rs_pos, [0, 0], [0, 1]);
        this.addP2Debug(this.rear_const, "prismaticConstraint");
        this.rear_const.lowerLimitEnabled = this.rear_const.upperLimitEnabled = true;
        this.rear_const.upperLimit = this.car.rs_up_lim;
        this.rear_const.lowerLimit = this.car.rs_low_lim;
        this.wheel_front.body.collides(this.cg_level);
        this.wheel_front.body.collides(this.cg_objects);
        this.wheel_rear.body.collides(this.cg_level);
        this.wheel_rear.body.collides(this.cg_objects);
        this.car_body.body.collides(this.cg_level);
        this.car_body.body.collides(this.cg_objects);
        this.driver_body.body.collides(this.cg_level);
        this.driver_body.body.collides(this.cg_objects);
        this.driver_head.body.collides(this.cg_level);
        this.driver_head.body.collides(this.cg_objects);
        this.car_body.body.collideWorldBounds = true;
        if (game.device.webAudio && game.g_player.sound) {
            // this.engine_snd.addMarker('run', 0.1, 2.2, 0.1, true);
            // this.engine_snd.play('run');
            game.playMusic.engine_snd.play();
        }
        if (this.level.m_friction != null) {
            this.wheelMaterial = game.physics.p2.createMaterial('wheelMaterial', this.wheel_rear.body);
            this.wheel_rear.body.setMaterial(this.wheelMaterial);
            this.wheel_front.body.setMaterial(this.wheelMaterial);
            contactMaterial = game.physics.p2.createContactMaterial(this.wheelMaterial, this.mud_material);
            return contactMaterial.friction = this.level.m_friction;
        }
    };

    PlayState.prototype.resizeGame = function() {
        return K = game.physics.p2.mpx(1.0);
    };

    PlayState.prototype.create = function() {

        SG_Hooks.setPauseHandler(() => {
            console.log("paused!")
            game.paused = true;
            this.is_running = false;
            game.playMusic.g_music.pause();
            game.playMusic.engine_snd.pause();
        });
        SG_Hooks.setUnpauseHandler(() => {
            console.log("unpaused!")
            game.paused = false;
            this.is_running = true;
            if (game.device.webAudio && game.g_player.sound) {
                if (!game.playMusic.g_music.playing()) {
                    game.playMusic.g_music.play();
                }
            }
        });

        var pause_btn, pause_menu_spr, spr, step, txt, xx, yy;
        g_this = this;
        this.flags_collected = game.g_player.flags[game.g_player.level];
        this.in_air = 0;
        this.in_air_flag = false;
        this.prev_in_air = 0;
        this.backflip_cnt = 0;
        this.flip_cnt = 0;
        this.bonus_cnt = 0;
        this.fuel_cnt = 0;
        this.x_max = 0;
        this.coins_ride = 0;
        this.head_flag = false;
        this.fuel_flag = false;
        this.prev_rot = 0;
        this.game_data = game.cache.getJSON('data');
        this.strings = game.cache.getJSON('strings');
        if (game.device.webAudio) {
            // game.sound.removeByKey('coin');
            // game.sound.removeByKey('fuel');
            // game.sound.removeByKey('neck');
            // game.sound.removeByKey('impact');
            // game.sound.removeByKey('mushrom');
            // game.sound.removeByKey('button');
            // game.sound.removeByKey('engine');
            // game.sound.removeByKey('level');
            // game.sound.removeByKey('low_fuel');
            // game.sound.removeByKey('flag');
            // this.coin_snd = game.add.audio('coin');
            // this.fuel_snd = game.add.audio('fuel');
            // this.neck_snd = game.add.audio('neck');
            // this.impact_snd = game.add.audio('impact');
            // this.mushrom_snd = game.add.audio('mushrom');
            // this.button_snd = game.add.audio('button');
            // this.engine_snd = game.add.audio('engine');
            // this.level_snd = game.add.audio('level');
            // this.low_fuel_snd = game.add.audio('low_fuel');
            // this.flag_snd = game.add.audio('flag');
        }
        game.physics.startSystem(Phaser.Physics.P2JS);
        this.back_grp = game.add.group();
        this.decor_grp = game.add.group();
        this.flags_grp = game.add.group();
        this.car_grp = game.add.group();
        this.land_grp = game.add.group();
        this.stones_grp = game.add.group();
        this.money_grp = game.add.group();
        this.gui_grp = game.add.group();
        this.game_grp = game.add.group();
        this.pause_grp = game.add.group();
        this.gui_grp.fixedToCamera = true;
        this.pause_grp.fixedToCamera = true;
        this.game_grp.fixedToCamera = true;
        txt = this.strings.tut + '\n';
        if (game.device.desktop) {
            txt += this.strings.tut_desk;
        } else {
            txt += this.strings.tut_mobile;
        }
        //var style_label = {font: 25 + "px Grobold", fill: "#ffffff", align: "center"};
        this.tut_text = game.add.text(game.width / 2, 180, txt, style_label);
        this.gui_grp.add(this.tut_text);
        this.tut_text.anchor.setTo(0.5);
        this.tut_text.strokeThickness = 5;
        this.tut_text.visible = false;
        if (game.g_player.tut) {
            this.tut_text.visible = true;
        }
        pause_btn = game.add.button(870, 10, 'gui', this.pauseClk, this, 'pause_game.png', 'pause_game.png', 'pause_game.png');
        this.gui_grp.add(pause_btn);
        pause_menu_spr = game.add.sprite(0, 0, 'gui', 'pause_dialog.png');
        this.pause_grp.add(pause_menu_spr);
        pause_menu_spr.x = (game.width - pause_menu_spr.width) / 2;
        pause_menu_spr.y = 150;
        xx = pause_menu_spr.x + 50;
        yy = pause_menu_spr.y + 140;
        step = 190;
        let sound_Button_Frame;
        if (game.g_player.sound) {
            sound_Button_Frame = 'sound_on.png';
        } else {
            sound_Button_Frame = 'sound_off.png';
        }
        // this.sound_pause_btn = game.add.button(xx, yy, 'gui', this.soundClk, this, 'sound_on.png', 'sound_on.png', 'sound_on_push.png');
        this.sound_pause_btn = game.add.button(xx, yy, 'gui', this.soundClk, this, sound_Button_Frame, sound_Button_Frame, 'sound_on_push.png');
        this.pause_grp.add(this.sound_pause_btn);
        xx += step;
        this.exit_pause_btn = game.add.button(xx, yy, 'gui', null, this, 'go_to_main.png', 'go_to_main.png', 'go_to_main.png');
        this.pause_grp.add(this.exit_pause_btn);
        xx += step;
        this.play_pause_btn = game.add.button(xx, yy, 'gui', this.playClk, this, 'play_button2.png', 'play_button2.png', 'play_button2_push.png');
        this.pause_grp.add(this.play_pause_btn);
        this.pause_grp.visible = false;
        spr = game.add.sprite(0, 0, 'gui', 'game_over_dialog.png');
        this.game_grp.add(spr);
        spr.x = (game.width - spr.width) / 2;
        spr.y = (game.height - spr.height) / 2 - 50;
        this.play_res_btn = game.add.button(spr.width / 2, 400, 'gui', this.playResClk, this, 'play_button.png', 'play_button.png', 'play_button_push.png');
        this.play_res_btn.anchor.setTo(0.5);
        spr.addChild(this.play_res_btn);
        this.race_result_txt = game.add.text(spr.width / 2, 50, this.strings.win_result, style_label);
        spr.addChild(this.race_result_txt);
        this.race_result_txt.anchor.setTo(0.5);
        this.race_result_txt.strokeThickness = 2;
        this.distance_txt = game.add.text(spr.width / 2, 120, this.strings.distance, style_label);
        spr.addChild(this.distance_txt);
        this.distance_txt.anchor.setTo(0.5);
        this.distance_txt.strokeThickness = 2;
        this.best_distance_txt = game.add.text(spr.width / 2, 160, this.strings.best_distance, style_label);
        spr.addChild(this.best_distance_txt);
        this.best_distance_txt.anchor.setTo(0.5);
        this.best_distance_txt.strokeThickness = 2;
        this.levels_completed_txt = game.add.text(spr.width / 2, 200, this.strings.levels_completed, style_label);
        spr.addChild(this.levels_completed_txt);
        this.levels_completed_txt.anchor.setTo(0.5);
        this.levels_completed_txt.strokeThickness = 2;
        this.money_collected_txt = game.add.text(spr.width / 2, 240, this.strings.money_collected, style_label);
        spr.addChild(this.money_collected_txt);
        this.money_collected_txt.anchor.setTo(0.5);
        this.money_collected_txt.strokeThickness = 2;
        this.new_record_txt = game.add.text(spr.width / 2, 310, this.strings.new_record, style_label);
        spr.addChild(this.new_record_txt);
        this.new_record_txt.anchor.setTo(0.5);
        this.new_record_txt.strokeThickness = 2;
        this.game_grp.visible = false;
        this.cg_level = game.physics.p2.createCollisionGroup();
        this.cg_car = game.physics.p2.createCollisionGroup();
        this.cg_driver_body = game.physics.p2.createCollisionGroup();
        this.cg_objects = game.physics.p2.createCollisionGroup();
        this.resizeGame();
        DEBUG = this.game_data.debug;
        this.cursors = game.input.keyboard.createCursorKeys();
        this.loadLevel(game.g_player.level);
        if (this.level.backflip) {
            this.backflip_coins = this.level.backflip;
        }
        if (this.level.flip) {
            this.flip_coins = this.levelflip;
        }
        if (this.level.start) {
            this.loadCar(this.level.start);
        } else {
            this.loadCar(10);
        }
        if (DEBUG) {
            this.dbg = game.add.graphics(0, 0);
        }
        this.acselerate = game.add.sprite(0, 0, 'gui', 'gas.png');
        this.gui_grp.add(this.acselerate);
        this.brake = game.add.sprite(0, 0, 'gui', 'brake.png');
        this.gui_grp.add(this.brake);
        this.acselerate.inputEnabled = true;
        this.brake.inputEnabled = true;
        this.acselerate.events.onInputDown.add(this.forward, this);
        this.acselerate.events.onInputUp.add(this.forwardUp, this);
        this.acselerate.events.onInputOut.add(this.forwardUp, this);
        this.brake.events.onInputDown.add(this.backward, this);
        this.brake.events.onInputUp.add(this.backwardUp, this);
        this.brake.events.onInputOut.add(this.backwardUp, this);
        this.acselerate.x = 824;
        this.brake.x = -1;
        if (game.device.safari) {
            this.acselerate.y = 400;
            this.brake.y = 410;
        } else {
            this.acselerate.y = 440;
            this.brake.y = 450;
        }
        this.gas_bar = game.add.sprite(0, 0, 'gui', 'gasolin_bar.png');
        this.gui_grp.add(this.gas_bar);
        this.gas_bar.x = 54;
        this.gas_bar.y = 47;
        this.gas_gui = game.add.sprite(0, 0, 'gui', 'gasolin_gui.png');
        this.gui_grp.add(this.gas_gui);
        this.gas_gui.x = 10;
        this.gas_gui.y = 11;
        this.coin_gui = game.add.sprite(0, 0, 'gui', 'coin_gui.png');
        this.gui_grp.add(this.coin_gui);
        this.coin_gui.x = 10;
        this.coin_gui.y = 92;
        this.speedmeter = game.add.sprite(0, 0, 'gui', 'speedmeter.png');
        this.gui_grp.add(this.speedmeter);
        this.speedmeter.x = 240;
        this.speedmeter.y = 10;
        this.speed_marker = game.add.sprite(0, 0, 'gui', 'speed_marker.png');
        this.gui_grp.add(this.speed_marker);
        this.speed_marker.x = 289;
        this.speed_marker.y = 15 + this.speed_marker.height;
        this.speed_marker.pivot.x = this.speed_marker.width / 2;
        this.speed_marker.pivot.y = this.speed_marker.height - 1;
        this.score_text = game.add.text(125, 122, "0", style_label);
        this.gui_grp.add(this.score_text);
        this.score_text.anchor.setTo(0.5);
        this.score_text.strokeThickness = 5;
        this.dist_text = game.add.text(410, 595, "0 / 100", style_label);
        this.gui_grp.add(this.dist_text);
        this.dist_text.anchor.setTo(0.5);
        this.dist_text.strokeThickness = 5;
        spr = game.add.sprite(0, 0, 'gui', 'ditance.png');
        this.gui_grp.add(spr);
        spr.x = 250;
        spr.y = 580;
        this.bonus_text = game.add.text(525, 142, "0", style_label);
        this.gui_grp.add(this.bonus_text);
        this.bonus_text.anchor.setTo(0.5);
        this.bonus_text.strokeThickness = 5;
        this.bonus_text.visible = false;
        game.input.onDown.add(this.inputDown, self);
        // window.onblur = () => {
        //   game.paused = true;
        //   this.is_running = false;
        // };
        // window.onfocus = () => {
        //   game.paused = false;
        //   this.is_running = true;
        // };
        return this.is_running = true;
    };

    PlayState.prototype.inputDown = function(pointer) {
        var xx, yy;
        xx = pointer.worldX - game.camera.x;
        yy = pointer.worldY - game.camera.y;
        if (game.paused) {
            if ((g_this.play_pause_btn.x <= xx && xx <= g_this.play_pause_btn.x + g_this.play_pause_btn.width)) {
                if ((g_this.play_pause_btn.y <= yy && yy <= g_this.play_pause_btn.y + g_this.play_pause_btn.height)) {
                    g_this.pause_grp.visible = false;
                    game.paused = false;
                    g_this.is_running = true;
                    if (game.device.webAudio && game.g_player.sound) {
                        // g_this.button_snd.play();
                        game.playMusic.button_snd.play();
                        game.playMusic.g_music.play();
                        game.playMusic.engine_snd.play();
                    }
                }
            }
            if ((g_this.exit_pause_btn.x <= xx && xx <= g_this.exit_pause_btn.x + g_this.exit_pause_btn.width)) {
                if ((g_this.exit_pause_btn.y <= yy && yy <= g_this.exit_pause_btn.y + g_this.exit_pause_btn.height)) {
                    g_this.pause_grp.visible = false;
                    game.paused = false;
                    g_this.is_running = false;
                    game.g_player.coins += g_this.coins_ride;
                    game.g_player.flags[game.g_player.level] = g_this.flags_collected;
                    g_this.coins_ride = 0;
                    if (game.device.localStorage) {
                        localStorage.setItem('up_hill_racing_savedata', JSON.stringify(game.g_player));
                    }
                    game.state.start('menu', true, false);
                    if (game.device.webAudio && game.g_player.sound) {
                        // g_this.button_snd.play();
                        game.playMusic.button_snd.play();
                    }
                    // if (game.device.webAudio) {
                    //   game.sound.removeByKey('engine');
                    // }
                }
            }
            if ((g_this.sound_pause_btn.x <= xx && xx <= g_this.sound_pause_btn.x + g_this.sound_pause_btn.width)) {
                if ((g_this.sound_pause_btn.y <= yy && yy <= g_this.sound_pause_btn.y + g_this.sound_pause_btn.height)) {
                    game.g_player.sound = !game.g_player.sound;
                    if (game.device.localStorage) {
                        localStorage.setItem('up_hill_racing_savedata', JSON.stringify(game.g_player));
                    }
                    if (game.g_player.sound) {
                        g_this.sound_pause_btn.setFrames('sound_on.png', 'sound_on.png', 'sound_on.png');
                        game.playMusic.button_snd.play();
                        if (game.device.webAudio) {
                            // g_music.loopFull(0.6);
                            // if (!g_this.engine_snd.isPlaying) {
                            //   return g_this.engine_snd.play('run');
                            // }
                            // if (!game.playMusic.g_music.playing()) {
                            //   game.playMusic.g_music.play();
                            // }
                            // if (!game.playMusic.engine_snd.playing()) {
                            //   return game.playMusic.engine_snd.play();;
                            // }
                        }
                    } else {
                        g_this.sound_pause_btn.setFrames('sound_off.png', 'sound_off.png', 'sound_off.png');
                        if (game.device.webAudio) {
                            // g_this.engine_snd.stop();
                            // return g_music.stop();
                            game.playMusic.engine_snd.pause();
                            return game.playMusic.g_music.pause();;
                        }
                    }
                }
            }
        }
    };

    PlayState.prototype.pauseClk = function() {
        if (game.device.webAudio && game.g_player.sound) {
            // this.button_snd.play();
            game.playMusic.button_snd.play();
        }
        game.playMusic.g_music.pause();
        game.playMusic.engine_snd.pause();
        this.pause_grp.visible = true;
        game.paused = true;
        return this.is_running = false;
    };

    PlayState.prototype.playResClk = function() {
        // game.sound.pauseAll();
        // SG_Hooks.levelFinished(sgCurlLevl, gameover_dist);
        // SG_Hooks.gameOver(1, gameover_dist, function() { game.sound.resumeAll(); });
        this.is_running = false;
        game.g_upgrades_flag = true;
        game.state.start('menu');
        game.playMusic.g_music.pause();
        if (game.device.webAudio && game.g_player.sound) {
            // return this.button_snd.play();
            return game.playMusic.button_snd.play();
        }
    };

    PlayState.prototype.playClk = function() {
        return this.is_running = true;
    };

    PlayState.prototype.carBodyContact = function(body) {
        if (game.device.webAudio && game.g_player.sound) {
            // this.impact_snd.play();
            game.playMusic.impact_snd.play();
        }
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.topBeginContact = function(body) {
        if (game.device.webAudio && game.g_player.sound) {
            // this.impact_snd.play();
            game.playMusic.impact_snd.play();
        }
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.topContact = function(body) {
        if (this.top_const != null) {
            game.physics.p2.removeConstraint(this.top_const);
        }
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.headContact = function(body) {
        if (this.driver_head_const != null) {
            this.driver_head_const.upperLimit = 0.5;
            this.driver_head_const.lowerLimit = -0.5;
            if (game.device.webAudio && game.g_player.sound) {
                // this.neck_snd.play();
                game.playMusic.neck_snd.play();
            }
        }
        this.head_flag = true;
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.mushrom_contact = function() {
        var val;
        val = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (this.shoot == null) {
            this.shoot = 0;
        }
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.mudBeginContact = function(body) {
        var rnd;
        if (this.level.m_ang_dump != null) {
            body.angularVelocity /= this.level.m_ang_dump;
        }
        if ((this.level.m_magic != null) && (this.level.m_magic_k != null)) {
            rnd = Math.random();
            if (rnd < this.level.m_magic_k) {
                if (this.magic) {
                    this.magic = false;
                } else {
                    this.magic = true;
                }
            }
        }
        this.in_air = 0;
        return this.in_air_flag = true;
    };

    PlayState.prototype.cmpl = function(spr) {
        return spr.destroy();
    };

    PlayState.prototype.win = function(dist) {
        SG_Hooks.gameOver();
        game.g_player.levels_completed++;
        this.race_result_txt.text = this.strings.win_result;
        this.distance_txt.text = this.strings.distance + ' ' + dist.toFixed();
        this.money_collected_txt.text = this.strings.money_collected + ' ' + this.coins_ride;
        if (dist > game.g_player.records[game.g_player.level]) {
            game.g_player.records[game.g_player.level] = dist;
            this.new_record_txt.visible = true;
        } else {
            this.new_record_txt.visible = false;
        }
        this.best_distance_txt.text = this.strings.best_distance + ' ' + game.g_player.records[game.g_player.level].toFixed();
        this.levels_completed_txt.text = this.strings.levels_completed + ' ' + game.g_player.levels_completed;
        gameover_dist = parseInt(dist.toFixed());
        //game.sound._muted == false ? (game.sound.setMute(), musicFlag = true) : musicFlag = false;
        //return SG_Hooks.gameOver(1, parseInt(dist.toFixed()), function() { musicFlag && game.sound.unsetMute(); });
    };

    PlayState.prototype.headFail = function(dist) {
        SG_Hooks.gameOver();
        this.race_result_txt.text = this.strings.head_fail;
        this.distance_txt.text = this.strings.distance + ' ' + dist.toFixed();
        this.money_collected_txt.text = this.strings.money_collected + ' ' + this.coins_ride;
        if (dist > game.g_player.records[game.g_player.level]) {
            game.g_player.records[game.g_player.level] = dist;
            this.new_record_txt.visible = true;
        } else {
            this.new_record_txt.visible = false;
        }
        this.best_distance_txt.text = this.strings.best_distance + ' ' + game.g_player.records[game.g_player.level].toFixed();
        this.levels_completed_txt.text = this.strings.levels_completed + ' ' + game.g_player.levels_completed;
        gameover_dist = parseInt(dist.toFixed());
        //game.sound._muted == false ? (game.sound.setMute(), musicFlag = true) : musicFlag = false;
        //return SG_Hooks.gameOver(1, parseInt(dist.toFixed()), function() { musicFlag && game.sound.unsetMute(); });
    };

    PlayState.prototype.fuelFail = function(dist) {
        SG_Hooks.gameOver();
        this.race_result_txt.text = this.strings.fuel_fail;
        this.distance_txt.text = this.strings.distance + ' ' + dist.toFixed();
        this.money_collected_txt.text = this.strings.money_collected + ' ' + this.coins_ride;
        if (dist > game.g_player.records[game.g_player.level]) {
            game.g_player.records[game.g_player.level] = dist;
            this.new_record_txt.visible = true;
        } else {
            this.new_record_txt.visible = false;
        }
        this.best_distance_txt.text = this.strings.best_distance + ' ' + game.g_player.records[game.g_player.level].toFixed();
        this.levels_completed_txt.text = this.strings.levels_completed + ' ' + game.g_player.levels_completed;
        gameover_dist = parseInt(dist.toFixed());
        //game.sound._muted == false ? (game.sound.setMute(), musicFlag = true) : musicFlag = false;
        //return SG_Hooks.gameOver(1, parseInt(dist.toFixed()), function() { musicFlag && game.sound.unsetMute(); });
    };

    PlayState.prototype.gameOver = function(dist) {
        if (this.head_flag && this.is_running) {
            // SG_Hooks.gameOver();
            this.is_running = false;
            if (!this.game_grp.visible) {
                this.game_grp.visible = true;
                if (game.device.webAudio) {
                    // this.engine_snd.stop();
                    game.playMusic.engine_snd.pause();
                    if (game.playMusic.low_fuel_snd.playing()) {
                        // this.low_fuel_snd.stop();
                        game.playMusic.low_fuel_snd.pause();
                    }
                }
                this.headFail(dist);
                game.g_player.coins += this.coins_ride;
                game.g_player.flags[game.g_player.level] = this.flags_collected;
                this.coins_ride = 0;
                if (game.device.localStorage) {
                    localStorage.setItem('up_hill_racing_savedata', JSON.stringify(game.g_player));
                }
            }
        }
        if (this.fuel <= 0.0 && this.is_running) {
            if ((Math.abs(this.car_body.body.velocity.x) < 2.0 && Math.abs(this.car_body.body.velocity.y) < 2.0) || this.fuel_cnt === 0) {
                if ((Math.abs(this.car_body.body.angularVelocity) < 1.0) || this.fuel_cnt === 0) {
                    // SG_Hooks.gameOver();
                    this.is_running = false;
                    if (!this.game_grp.visible) {
                        this.game_grp.visible = true;
                        this.fuelFail(dist);
                        game.g_player.coins += this.coins_ride;
                        game.g_player.flags[game.g_player.level] = this.flags_collected;
                        this.coins_ride = 0;
                        if (game.device.localStorage) {
                            localStorage.setItem('up_hill_racing_savedata', JSON.stringify(game.g_player));
                        }
                    }
                }
            }
        }
        if (dist > this.level.win_dist && this.is_running) {
            if (!this.game_grp.visible) {
                this.game_grp.visible = true;
                if (game.device.webAudio) {
                    // this.engine_snd.stop();
                    game.playMusic.engine_snd.pause();
                    if (game.playMusic.low_fuel_snd.playing()) {
                        // this.low_fuel_snd.stop();
                        game.playMusic.low_fuel_snd.pause();
                    }
                }
                // SG_Hooks.gameOver();
                this.is_running = false;
                if (game.device.webAudio && game.g_player.sound) {
                    // this.level_snd.play();
                    game.playMusic.level_snd.play();
                }
                this.win(dist);
                game.g_player.coins += this.coins_ride;
                game.g_player.flags[game.g_player.level] = this.flags_collected;
                this.coins_ride = 0;
                if (game.device.localStorage) {
                    localStorage.setItem('up_hill_racing_savedata', JSON.stringify(game.g_player));
                }
            }
        }
        if (this.game_grp.visible) {
            this.wheel_front.body.angularVelocity /= 1.05;
            return this.wheel_rear.body.angularVelocity /= 1.05;
        }
    };

    PlayState.prototype.update = function() {
        var coin, d, flag, food, from, gas, i, in_air, index, k, l, len, len1, len2, len3, len4, len5, len6, m, mud, mul, mushrom, o, p, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref3, ref4, ref5, ref6, ref7, ref8, ref9, res, rnd, rot, s, spr, start, steps, t, tween, val, vol, x, y, y1, y2;
        this.x_max = Math.max(this.x_max, this.car_body.x);
        m = this.x_max / 20.0;
        this.dist_text.text = '' + m.toFixed() + ' / ' + this.level.win_dist;
        this.gameOver(m);
        if (this.prev_vel == null) {
            this.prev_vel = Math.abs(this.car_body.body.velocity.y);
        } else {
            d = this.prev_vel - Math.abs(this.car_body.body.velocity.y);
            this.prev_vel = Math.abs(this.car_body.body.velocity.y);
        }
        if (Math.abs(d) > this.car.food_force) {
            index = (Math.random() * (this.game_data.food.length - 1)).toFixed();
            food = this.game_data.food[index];
            spr = game.add.sprite(this.car_body.x, this.car_body.y, 'atlas', food.sprite);
            from = {
                x: this.car.food_pos[0],
                y: this.car.food_pos[1]
            };
            p = new Phaser.Point();
            p.x = this.car.food_pos[0];
            p.y = this.car.food_pos[1];
            p = p.rotate(0, 0, this.car_body.rotation);
            spr.x += p.x;
            spr.y += p.y;
            this.stones_grp.add(spr);
            this.food.push(spr);
            game.physics.p2.enable([spr], Phaser.Physics.P2JS, true);
            spr.body.clearShapes();
            spr.body.loadPolygon('physics', food.poly);
            spr.body.mass = 1;
            spr.body.debug = false;
            spr.body.setCollisionGroup(this.cg_objects);
            spr.body.collides(this.cg_level);
            rnd = Math.random() * 20;
            spr.body.velocity.y = -200 - rnd;
            spr.body.angularVelocity = rnd;
        }
        ref = this.food;
        for (k = 0, len = ref.length; k < len; k++) {
            spr = ref[k];
            if (spr && Math.abs(spr.x - game.camera.x) > 1500) {
                spr.destroy();
                spr = null;
            }
        }
        ref1 = this.mushroms;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
            mushrom = ref1[l];
            if (mushrom.shoot != null) {
                if (mushrom.shoot > 20) {
                    if (game.device.webAudio && game.g_player.sound) {
                        // if (!this.mushrom_snd.flag) {
                        //   this.mushrom_snd.play();
                        //   this.mushrom_snd.flag = true;
                        // }
                        game.playMusic.mushrom_snd.play();
                    }
                    mushrom.body.velocity.y = -300;
                }
                if (mushrom.shoot > 25) {
                    mushrom.body.velocity.y = 0;
                }
                if (mushrom.shoot > 30) {
                    mushrom.body.velocity.y = 300;
                }
                if (mushrom.shoot > 35) {
                    mushrom.body.velocity.y = 0;
                    mushrom.shoot = void 0;
                } else {
                    mushrom.shoot++;
                }
            }
        }
        this.mask.clear();
        this.mask_top.clear();
        game.camera.x = this.car_body.x - this.car_body.width / 1.5;
        game.camera.y += (this.car_body.y - (game.camera.y + game.height / 2)) / 2.0;
        this.mask.clear();
        this.mask_top.clear();
        this.tile.x = game.camera.x - MARGIN / 2;
        this.tile.y = game.camera.y - MARGIN / 2;
        this.tile.tilePosition.x = -game.camera.x;
        this.tile.tilePosition.y = -game.camera.y;
        if (this.level.top) {
            this.tile_top.x = game.camera.x - MARGIN / 2;
            this.tile_top.y = game.camera.y - MARGIN / 2;
            this.tile_top.tilePosition.x = -game.camera.x;
            this.tile_top.tilePosition.y = -game.camera.y;
        }
        if ((this.level.back_stay != null) && this.level.back_stay) {
            this.back.x = game.camera.x - MARGIN_BACK / 2;
            this.back.y = game.camera.y - MARGIN_BACK / 2;
        } else {
            this.back.x = game.camera.x - MARGIN_BACK / 2;
            this.back.y = game.camera.y - MARGIN_BACK / 2;
            this.back.tilePosition.x = -game.camera.x / 20.0;
        }
        start = Math.min(this.drawmap.length, Math.max(0, Math.floor(game.camera.x / K) - 4));
        steps = Math.min(this.drawmap.length, Math.floor(game.width / K) + start + 8);
        i = start;
        this.mask.beginFill(0x00ff00, 0.5);
        this.mask.moveTo(this.drawmap[i].x, game.camera.y + game.height);
        while (i < steps) {
            ref2 = this.drawmap[i], x = ref2.x, y = ref2.y;
            this.mask.lineTo(x, y);
            i++;
        }
        this.mask.lineTo(x, game.camera.y + game.height);
        this.mask.endFill();
        this.land_line.clear();
        if (this.mud_color != null) {
            ref3 = this.mud_drawmap;
            for (o = 0, len2 = ref3.length; o < len2; o++) {
                mud = ref3[o];
                this.land_line.beginFill(this.mud_color, 1);
                this.land_line.lineStyle(10, this.mud_color, 1);
                i = 0;
                ref4 = mud[i], x = ref4.x, y = ref4.y;
                this.land_line.moveTo(x, y);
                i++;
                while (i < mud.length) {
                    ref5 = mud[i], x = ref5.x, y = ref5.y;
                    this.land_line.lineTo(x, y);
                    i++;
                }
                this.land_line.endFill();
            }
        }
        this.land_line.lineStyle(10, this.ground_color, 1);
        i = start;
        ref6 = this.drawmap[i], x = ref6.x, y = ref6.y;
        this.land_line.moveTo(x, y);
        i++;
        while (i < steps) {
            ref7 = this.drawmap[i], x = ref7.x, y = ref7.y;
            this.land_line.lineTo(x, y + 3);
            i++;
        }
        if (this.level.top) {
            this.land_line.lineStyle(10, this.ground_color, 1);
            start = Math.min(this.drawtop.length, Math.max(0, Math.floor(game.camera.x / (K * 2)) - 4));
            steps = Math.min(this.drawtop.length, Math.floor(game.width / (K * 2)) + start + 8);
            i = start;
            this.mask_top.beginFill(0x00ff00, 0.5);
            this.mask_top.moveTo(this.drawtop[i].x, game.camera.y + game.height);
            this.mask_top.moveTo(this.drawtop[i].x, game.camera.y - game.height);
            while (i < steps) {
                ref8 = this.drawtop[i], x = ref8.x, y = ref8.y;
                this.mask_top.lineTo(x, y);
                i++;
            }
            this.mask_top.lineTo(x, game.camera.y - game.height);
            this.mask_top.endFill();
            i = start;
            ref9 = this.drawtop[i], x = ref9.x, y = ref9.y;
            this.land_line.moveTo(x, y);
            i++;
            while (i < steps) {
                ref10 = this.drawtop[i], x = ref10.x, y = ref10.y;
                this.land_line.lineTo(x, y + 3);
                i++;
            }
        }
        ref11 = this.money;
        for (q = 0, len3 = ref11.length; q < len3; q++) {
            coin = ref11[q];
            if (coin.flag == null) {
                flag = false;
                if (this.car_top != null) {
                    if (coin.overlap(this.car_body) || coin.overlap(this.car_top)) {
                        flag = true;
                    }
                } else {
                    if (coin.overlap(this.car_body)) {
                        flag = true;
                    }
                }
                if (flag) {
                    coin.flag = true;
                    tween = game.add.tween(coin);
                    tween.to({
                        x: coin.x - 100,
                        y: coin.y - 100,
                        alpha: 0
                    }, 111, Phaser.Easing.Linear.None);
                    tween.start();
                    if (!this.game_grp.visible) {
                        this.coins_ride += coin.val;
                    }
                    if (((ref12 = this.score_text) != null ? ref12.text : void 0) != null) {
                        this.score_text.text = '' + this.coins_ride;
                    }
                    if (game.device.webAudio && game.g_player.sound) {
                        // this.coin_snd.play();
                        game.playMusic.coin_snd.play();
                    }
                }
            }
        }
        ref13 = this.flags;
        for (r = 0, len4 = ref13.length; r < len4; r++) {
            coin = ref13[r];
            if (coin.flag == null) {
                flag = false;
                if (this.car_top != null) {
                    if (coin.overlap(this.car_body) || coin.overlap(this.car_top)) {
                        flag = true;
                    }
                } else {
                    if (coin.overlap(this.car_body)) {
                        flag = true;
                    }
                }
                if (flag) {
                    coin.flag = true;
                    tween = game.add.tween(coin);
                    tween.to({
                        x: coin.x,
                        y: coin.y - 100,
                        alpha: 0
                    }, 111, Phaser.Easing.Linear.None);
                    tween.start();
                    if (!this.game_grp.visible) {
                        this.coins_ride += coin.val;
                        this.flags_collected++;
                    }
                    if (((ref14 = this.score_text) != null ? ref14.text : void 0) != null) {
                        this.score_text.text = '' + this.coins_ride;
                    }
                    if (game.device.webAudio && game.g_player.sound) {
                        // this.flag_snd.play();
                        game.playMusic.flag_snd.play();
                    }
                }
            }
        }
        ref15 = this.gas;
        for (s = 0, len5 = ref15.length; s < len5; s++) {
            gas = ref15[s];
            if (gas.flag == null) {
                flag = false;
                if (this.car_top != null) {
                    if (gas.overlap(this.car_body) || gas.overlap(this.car_top)) {
                        flag = true;
                    }
                } else {
                    if (gas.overlap(this.car_body)) {
                        flag = true;
                    }
                }
                if (flag) {
                    gas.flag = true;
                    tween = game.add.tween(gas);
                    tween.to({
                        x: gas.x - 100,
                        y: gas.y - 100,
                        alpha: 0
                    }, 111, Phaser.Easing.Linear.None);
                    tween.start();
                    this.fuel += gas.val;
                    this.fuel = Math.min(this.fuel, this.car.fuel_max);
                    this.fuel_cnt = 0;
                    if (game.device.webAudio && game.g_player.sound) {
                        // this.fuel_snd.play();
                        game.playMusic.fuel_snd.play();
                        if (!game.playMusic.engine_snd.playing()) {
                            // this.engine_snd.play('run');
                            game.playMusic.engine_snd.play();
                        }
                    }
                }
            }
        }
        if (DEBUG) {
            this.dbg.clear();
            i = 0;
            while (i < this.springsArray.length) {
                this.dbg.lineStyle(5, 0x0000ff, 1.0);
                ref16 = this.springsArray[i][0].world, x = ref16.x, y = ref16.y;
                this.dbg.moveTo(x, y);
                ref17 = this.springsArray[i][1].world, x = ref17.x, y = ref17.y;
                this.dbg.lineTo(x, y);
                i += 1;
            }
            i = 0;
            while (i < this.constraintsArray.length) {
                this.dbg.lineStyle(2, 0x00ff00, 1.0);
                ref18 = this.constraintsArray[i][0].world, x = ref18.x, y = ref18.y;
                this.dbg.moveTo(x, y);
                ref19 = this.constraintsArray[i][1].world, x = ref19.x, y = ref19.y;
                this.dbg.lineTo(x, y);
                i += 1;
            }
        }
        if ((this.cursors.left.isDown || this.backward_flag) && this.is_running) {
            this.brake.frameName = 'brake_pushed.png';
            this.tut_text.visible = false;
            game.g_player.tut = false;
            if (this.fuel > 0) {
                if (!this.magic) {
                    this.wheel_rear.body.angularVelocity -= this.car.accel;
                } else {
                    this.wheel_rear.body.angularVelocity += this.car.accel;
                }
                this.wheel_rear.body.angularVelocity = Math.min(this.wheel_rear.body.angularVelocity, this.car.max_vel);
                if (this.car.awd) {
                    if (!this.magic) {
                        this.wheel_front.body.angularVelocity -= this.car.accel;
                    } else {
                        this.wheel_front.body.angularVelocity += this.car.accel;
                    }
                    this.wheel_front.body.angularVelocity = Math.min(this.wheel_front.body.angularVelocity, this.car.max_vel);
                }
            }
            y1 = this.drawmap[Math.floor(this.wheel_front.x / K)].y;
            y2 = this.drawmap[Math.floor(this.wheel_front.x / K) + 1].y;
            if (this.wheel_front.y + this.wheel_front.width < y1 && this.wheel_front.y + this.wheel_front.width < y2) {
                y1 = this.drawmap[Math.floor(this.wheel_rear.x / K)].y;
                y2 = this.drawmap[Math.floor(this.wheel_rear.x / K) + 1].y;
                if (this.wheel_rear.y + this.wheel_rear.width < y1 && this.wheel_rear.y + this.wheel_rear.width < y2) {
                    if (!this.magic) {
                        if (this.car_body.body.angularVelocity < this.car.air_max) {
                            this.car_body.body.angularVelocity += this.car.air_accsel;
                        }
                    } else {
                        if (this.car_body.body.angularVelocity > -this.car.air_max) {
                            this.car_body.body.angularVelocity -= this.car.air_accsel;
                        }
                    }
                }
            }
        } else {
            this.brake.frameName = 'brake.png';
        }
        if ((this.cursors.right.isDown || this.forward_flag) && this.is_running) {
            this.acselerate.frameName = 'gas_pushed.png';
            this.tut_text.visible = false;
            game.g_player.tut = false;
            if (this.fuel > 0) {
                if (!this.magic) {
                    this.wheel_rear.body.angularVelocity += this.car.accel;
                } else {
                    this.wheel_rear.body.angularVelocity -= this.car.accel;
                }
                this.wheel_rear.body.angularVelocity = Math.min(this.wheel_rear.body.angularVelocity, this.car.max_vel);
                if (this.car.awd) {
                    if (!this.magic) {
                        this.wheel_front.body.angularVelocity += this.car.accel;
                    } else {
                        this.wheel_front.body.angularVelocity -= this.car.accel;
                    }
                    this.wheel_front.body.angularVelocity = Math.min(this.wheel_front.body.angularVelocity, this.car.max_vel);
                }
            }
            y1 = this.drawmap[Math.floor(this.wheel_front.x / K)].y;
            y2 = this.drawmap[Math.floor(this.wheel_front.x / K) + 1].y;
            if (this.wheel_front.y + this.wheel_front.width < y1 && this.wheel_front.y + this.wheel_front.width < y2) {
                y1 = this.drawmap[Math.floor(this.wheel_rear.x / K)].y;
                y2 = this.drawmap[Math.floor(this.wheel_rear.x / K) + 1].y;
                if (this.wheel_rear.y + this.wheel_rear.width < y1 && this.wheel_rear.y + this.wheel_rear.width < y2) {
                    if (!this.magic) {
                        if (this.car_body.body.angularVelocity > -this.car.air_max) {
                            this.car_body.body.angularVelocity -= this.car.air_accsel;
                        }
                    } else {
                        if (this.car_body.body.angularVelocity < this.car.air_max) {
                            this.car_body.body.angularVelocity += this.car.air_accsel;
                        }
                    }
                }
            }
        } else {
            this.acselerate.frameName = 'gas.png';
        }
        if (this.wheel_rear.body.angularVelocity < 0) {
            this.speed_marker.rotation = -2.6;
        } else {
            rot = -2.6 + this.wheel_rear.body.angularVelocity / this.car.max_vel * 4.8;
            this.speed_marker.rotation = (this.speed_marker.rotation + rot) / 2.0;
        }
        vol = Math.abs(this.wheel_rear.body.angularVelocity) / this.car.max_vel;
        vol = Math.min(vol + 0.1, 1.0);
        if (game.device.webAudio && game.g_player.sound) {
            // this.engine_snd.fadeTo(0.01, vol);
            // game.playMusic.engine_snd.play();
        }
        if (this.is_running) {
            y1 = this.drawmap[Math.floor(this.wheel_front.x / K)].y;
            y2 = this.drawmap[Math.floor(this.wheel_front.x / K) + 1].y;
            if (this.wheel_front.y + this.wheel_front.width < y1 && this.wheel_front.y + this.wheel_front.width < y2) {
                y1 = this.drawmap[Math.floor(this.wheel_rear.x / K)].y;
                y2 = this.drawmap[Math.floor(this.wheel_rear.x / K) + 1].y;
                if (this.wheel_rear.y + this.wheel_rear.width < y1 && this.wheel_rear.y + this.wheel_rear.width < y2) {
                    this.in_air += 1;
                } else {
                    this.in_air = 0;
                    this.in_air_flag = true;
                }
            } else {
                this.in_air = 0;
                this.in_air_flag = true;
            }
            in_air = this.in_air / 60.0;
            if (in_air > 1) {
                if (this.car_body.rotation < this.prev_rot - 6.28) {
                    this.backflip_cnt++;
                    this.prev_rot = Math.ceil(this.car_body.rotation / 6.28) * 6.28;
                    if (this.level.backflip) {
                        if (this.backflip_cnt > 1) {
                            this.backflip_coins *= 2;
                        }
                        this.bonus_text.text = this.strings.backflip + this.backflip_coins.toFixed() + this.strings.coins;
                        this.bonus_text.x = game.width / 2;
                        this.bonus_text.visible = true;
                        this.bonus_cnt = 0;
                        this.coins_ride += this.backflip_coins;
                        if (((ref20 = this.score_text) != null ? ref20.text : void 0) != null) {
                            this.score_text.text = '' + this.coins_ride.toFixed();
                        }
                        if (game.device.webAudio && game.g_player.sound) {
                            // this.coin_snd.play();
                            game.playMusic.coin_snd.play();
                        }
                    }
                }
                if (this.car_body.rotation > this.prev_rot + 6.28) {
                    this.flip_cnt++;
                    this.prev_rot = Math.floor(this.car_body.rotation / 6.28) * 6.28;
                    if (this.level.flip != null) {
                        if (this.flip_cnt > 1) {
                            this.flip_coins *= 2;
                        }
                        this.bonus_text.text = this.strings.flip + this.flip_coins.toFixed() + this.strings.coins;
                        this.bonus_text.x = game.width / 2;
                        this.bonus_text.visible = true;
                        this.bonus_cnt = 0;
                        this.coins_ride += this.flip_coins;
                        if (((ref21 = this.score_text) != null ? ref21.text : void 0) != null) {
                            this.score_text.text = '' + this.coins_ride.toFixed();
                        }
                        if (game.device.webAudio && game.g_player.sound) {
                            // this.coin_snd.play();
                            game.playMusic.coin_snd.play();
                        }
                    }
                }
                if (this.in_air_flag) {
                    this.prev_in_air = this.in_air;
                }
            } else {
                this.backflip_cnt = 0;
                this.flip_cnt = 0;
                if (this.level.backflip) {
                    this.backflip_coins = this.level.backflip;
                }
                if (this.level.flip) {
                    this.flip_coins = this.level.flip;
                }
            }
            if (this.in_air === 0 && this.in_air_flag && (this.level.air_time != null)) {
                if ((this.prev_in_air != null) && this.prev_in_air > 1) {
                    res = this.prev_in_air / 60.0;
                    res = parseInt(res.toFixed());
                    mul = 0;
                    ref22 = this.level.air_time;
                    for (t = 0, len6 = ref22.length; t < len6; t++) {
                        val = ref22[t];
                        if (res >= val.time) {
                            mul = val.mul;
                        }
                    }
                    if (mul > 0) {
                        res = res * mul;
                        res = parseInt(res.toFixed());
                        this.bonus_text.text = this.strings.air + res + this.strings.coins;
                        this.bonus_text.x = game.width / 2;
                        this.bonus_text.visible = true;
                        this.bonus_cnt = 0;
                        this.coins_ride += res;
                        if (((ref23 = this.score_text) != null ? ref23.text : void 0) != null) {
                            this.score_text.text = '' + this.coins_ride.toFixed();
                        }
                        if (game.device.webAudio && game.g_player.sound) {
                            // this.coin_snd.play();
                            game.playMusic.coin_snd.play();
                        }
                    }
                }
                this.prev_in_air = 0;
            }
            if (this.fuel > 0) {
                this.fuel -= this.car.fuel_cons;
                if (this.fuel <= 0) {
                    this.fuel_cnt = 60 * 5;
                }
            }
        }
        this.gas_bar.scale.x = this.fuel / this.car.fuel_max;
        if ((0.0 < (ref24 = this.gas_bar.scale.x) && ref24 < 0.3)) {
            if (game.device.webAudio && game.g_player.sound) {
                if (!game.playMusic.low_fuel_snd.playing()) {
                    // this.low_fuel_snd.play();
                    game.playMusic.low_fuel_snd.play();
                }
            }
        }
        if (this.fuel <= 0.0) {
            if (game.device.webAudio) {
                // this.engine_snd.stop();
                game.playMusic.engine_snd.pause();
            }
            if (this.fuel_cnt) {
                this.fuel_cnt--;
            }
        }
        if (this.game_data.cheat) {
            if (this.cursors.up.isDown) {
                this.car_body.body.velocity.y -= 100.0;
            }
        }
        if (this.bonus_text.visible) {
            this.bonus_cnt++;
            if (this.bonus_cnt > 220) {
                this.bonus_text.visible = false;
                return this.bonus_cnt = 0;
            }
        }
    };

    PlayState.prototype.forward = function() {
        return this.forward_flag = true;
    };

    PlayState.prototype.backward = function() {
        return this.backward_flag = true;
    };

    PlayState.prototype.forwardUp = function() {
        return this.forward_flag = false;
    };

    PlayState.prototype.backwardUp = function() {
        return this.backward_flag = false;
    };

    return PlayState;

})();